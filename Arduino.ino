#include <Arduino.h>
#include <U8g2lib.h>

#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif

U8G2_SSD1306_128X64_NONAME_1_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

#define bmp1_x 64
#define bmp1_y 64

#include <Servo.h>
Servo servo_1;  // Create a servo instance named servo_1. 


#define Trig 2 //Pin Tring Connection IO D2
#define Echo 3 //Pin Echo Connection IO D3 

float cm; //distance variable
float temp; //
int pic = 1;
static const unsigned char bmp1[] U8X8_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0xC0, 0x39, 0x00, 0x00, 0xE0, 0x38, 0x00,
  0x00, 0xE0, 0x39, 0x00, 0x00, 0xE0, 0x38, 0x00, 0x00, 0x78, 0xC0, 0x00, 0x00, 0x78, 0xC0, 0x00, 0x00, 0x38, 0xC0, 0x01, 0x00, 0x1C, 0xC0, 0x01, 0x00, 0x38, 0x80, 0xF2, 0xFF, 0x1D, 0xC0, 0x01,
  0x00, 0x38, 0x00, 0xFE, 0xFF, 0x03, 0xC0, 0x01, 0x00, 0x1C, 0x00, 0xFE, 0xFF, 0x03, 0xC0, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E,
  0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x38, 0xE0, 0x00, 0x80, 0x07, 0x00, 0x80, 0x0F, 0x38,
  0xE0, 0x00, 0xC0, 0x1F, 0x00, 0xE0, 0x0F, 0x38, 0xE0, 0x00, 0x80, 0x7F, 0x00, 0xF0, 0x03, 0x38, 0xE0, 0x00, 0xC0, 0x79, 0x00, 0xF0, 0x07, 0x38, 0xE0, 0x00, 0xC0, 0x01, 0x00, 0x20, 0x07, 0x38,
  0xE0, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0x3F, 0x38, 0xE0, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0x3F, 0x38, 0xE0, 0x00, 0xC0, 0x0F, 0xE0, 0x03, 0x3F, 0x38, 0xE0, 0x00, 0x00, 0x00, 0xF0, 0x07, 0x00, 0x38,
  0xE0, 0x00, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x38, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE0, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x38, 0xE0, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x38,
  0xE0, 0x00, 0x00, 0x00, 0xFF, 0x3F, 0x00, 0x38, 0x00, 0x07, 0x00, 0x00, 0xFF, 0x37, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0xFF, 0x1F, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0xE6, 0x1F, 0x00, 0x0F,
  0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0xE0, 0xFF, 0x01, 0x00, 0x00, 0x3F, 0x00,
  0x00, 0xE0, 0xFF, 0x01, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x3F, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x1C, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00,
  0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E,
  0x03, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x00, 0x0F, 0x03, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x00, 0x0F, 0x03, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x07, 0x0E, 0x03, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x07, 0x0E,
  0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x07, 0x0E, 0x03, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x07, 0x0E, 0x03, 0x00, 0x00, 0x7E, 0x00, 0xE0, 0x00, 0x0E, 0x03, 0x00, 0x00, 0x7E, 0x00, 0xE0, 0x00, 0x0E,
  0xFC, 0xFF, 0xFF, 0x01, 0x00, 0x3C, 0xC0, 0x01, 0xFC, 0xFF, 0xFF, 0x01, 0x00, 0x1C, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0xC0, 0x01, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03, 0xC0, 0x01,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD0, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

};

#define bmp2_x 64
#define bmp2_y 64

static const unsigned char bmp2[] U8X8_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xC0, 0x0E, 0x00, 0xE0, 0x0E, 0x00,
  0x00, 0x00, 0xC0, 0x0E, 0x00, 0xE0, 0x0E, 0x00, 0x00, 0x00, 0x38, 0x70, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x38, 0x70, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x38, 0xC0, 0xFF, 0x1F, 0x38, 0x00,
  0x00, 0x00, 0x38, 0xC0, 0xFF, 0x07, 0x38, 0x00, 0x00, 0x00, 0x38, 0xC0, 0xFF, 0x07, 0x38, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xC0, 0x01,
  0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x80, 0x03,
  0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x70, 0x00, 0x00, 0x81, 0x03, 0x00, 0x80, 0x03, 0x70, 0x00, 0x00, 0x81, 0x03,
  0x00, 0x80, 0x03, 0xF0, 0x01, 0x00, 0x8F, 0x03, 0x00, 0x80, 0x03, 0xF0, 0x01, 0x00, 0x8F, 0x03, 0x00, 0x80, 0x03, 0xF0, 0x81, 0x07, 0x8F, 0x03, 0x00, 0x80, 0x03, 0x00, 0xE0, 0x07, 0x80, 0x03,
  0x00, 0x80, 0x03, 0x00, 0x80, 0x07, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x80, 0x03,
  0x00, 0x80, 0x07, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xC0, 0x01,
  0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xC0, 0x7F, 0x00, 0x00, 0x0F, 0x00,
  0x00, 0x00, 0xC0, 0x7F, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x3C, 0x0F, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3F, 0x00, 0x00, 0x00, 0x38, 0x00,
  0x00, 0x80, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00,
  0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01,
  0x00, 0x70, 0x00, 0x00, 0xE0, 0xFF, 0xC0, 0x01, 0x00, 0x70, 0x00, 0x00, 0xE0, 0xFF, 0xC0, 0x01, 0x00, 0x70, 0x00, 0x00, 0xF0, 0x00, 0xC1, 0x01, 0x00, 0x70, 0x00, 0x00, 0xF0, 0x00, 0xC1, 0x01,
  0x00, 0x70, 0x00, 0x00, 0x1C, 0x00, 0xC1, 0x01, 0x00, 0x70, 0x00, 0x00, 0x1C, 0x00, 0xC1, 0x01, 0x00, 0x70, 0x00, 0xC0, 0x1F, 0xE0, 0xC0, 0x01, 0x00, 0x70, 0x00, 0xC0, 0x0F, 0xE0, 0xC0, 0x01,
  0x00, 0xF0, 0xFF, 0xFF, 0x03, 0x38, 0x38, 0x00, 0x00, 0xF0, 0xFF, 0x7F, 0x00, 0x38, 0x38, 0x00, 0x00, 0xE0, 0xFF, 0x7F, 0xE0, 0x3F, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x07, 0x38, 0x00,
  0x00, 0x00, 0x18, 0xF0, 0xFF, 0xC7, 0x3F, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  /* (64 X 64 )*/

};
#define bmp3_x 64
#define bmp3_y 64

static const unsigned char bmp3[] U8X8_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xC0, 0x38, 0x00, 0x00, 0xE0, 0x1C, 0x00,
  0x00, 0xC0, 0x38, 0x00, 0x00, 0xE0, 0x1C, 0x00, 0x00, 0xF8, 0xC0, 0x01, 0x00, 0xFC, 0xE0, 0x00, 0x00, 0x38, 0xC0, 0x01, 0x00, 0x1C, 0xE0, 0x01, 0x00, 0x38, 0x80, 0xE3, 0xFF, 0x1F, 0xE0, 0x01,
  0x00, 0x38, 0x00, 0xFE, 0xFF, 0x03, 0xE0, 0x01, 0x00, 0x38, 0x00, 0xFE, 0xFF, 0x03, 0xC0, 0x01, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0E, 0x00, 0x07, 0xC0, 0x07, 0x00, 0xC0, 0x1F, 0x0F,
  0x00, 0x07, 0xF0, 0x1F, 0x00, 0xC0, 0x1D, 0x0E, 0x00, 0x07, 0x38, 0x00, 0x00, 0xC0, 0x00, 0x0E, 0xE0, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x78, 0xE0, 0x00, 0xF0, 0x1F, 0x00, 0xC0, 0x3F, 0x78,
  0xE0, 0x00, 0xF0, 0x63, 0x00, 0xC0, 0x23, 0x70, 0xE0, 0x00, 0xF0, 0x63, 0x00, 0xC0, 0x23, 0x70, 0xE0, 0x00, 0xF0, 0x63, 0x00, 0xC0, 0xE3, 0x70, 0xE0, 0x00, 0xF0, 0x7F, 0x00, 0xC0, 0xFF, 0x78,
  0xE0, 0x00, 0xF0, 0x7F, 0x00, 0xC0, 0xFF, 0x70, 0xE0, 0x00, 0xF0, 0x7F, 0x00, 0xC0, 0xFF, 0x70, 0xE0, 0x00, 0xF0, 0x3F, 0xE0, 0xC3, 0xFF, 0x70, 0xE0, 0x00, 0xF0, 0x3F, 0xE0, 0xC3, 0x3F, 0x70,
  0xE0, 0x00, 0x00, 0x00, 0xE0, 0x03, 0x00, 0x70, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0xE0, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x70,
  0xE0, 0x00, 0x00, 0x00, 0x40, 0x10, 0x00, 0x70, 0x00, 0x07, 0x00, 0x00, 0xFE, 0x1F, 0x00, 0x0F, 0x00, 0x07, 0x00, 0x00, 0xBC, 0x0F, 0x00, 0x0F, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
  0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0xC0, 0xFF, 0x01, 0x00, 0x00, 0x3F, 0x00,
  0x00, 0xC0, 0xFF, 0x01, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x38, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00,
  0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E,
  0x07, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x00, 0x0F, 0x07, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x00, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x0F, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x0F, 0x0E,
  0x07, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x0F, 0x0F, 0x07, 0x00, 0x00, 0x7E, 0x00, 0xE0, 0x00, 0x0F, 0x07, 0x00, 0x00, 0x7E, 0x00, 0xE0, 0x00, 0x0F,
  0xFE, 0xFF, 0xFF, 0x03, 0x00, 0x3C, 0xE0, 0x01, 0xFE, 0xFF, 0xFF, 0x03, 0x00, 0x1C, 0xE0, 0x01, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x03, 0xE0, 0x01, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x03, 0xE0, 0x01,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0xE4, 0xFD, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  /* (64 X 64 )*/


};


#define bmp4_x 64
#define bmp4_y 64

static const unsigned char bmp4[] U8X8_PROGMEM = {
  0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x07, 0x00, 0x00, 0x06, 0xC7, 0x01, 0x00, 0x0C, 0x07, 0x06, 0x80, 0x03, 0x07, 0x03, 0x00, 0xE0, 0x38, 0x0C, 0xC0, 0xC0, 0x38, 0x06,
  0x00, 0xE0, 0x38, 0x18, 0x40, 0xE0, 0x38, 0x04, 0x00, 0x98, 0x80, 0x01, 0x00, 0x78, 0xC0, 0x0C, 0x00, 0x18, 0xC0, 0x01, 0x00, 0x3C, 0xC0, 0x01, 0x20, 0x18, 0x80, 0x10, 0x42, 0x1E, 0xC0, 0x01,
  0x38, 0x18, 0x00, 0xFE, 0xFF, 0x07, 0xC0, 0x01, 0x18, 0x18, 0x00, 0xFE, 0xFF, 0x03, 0xC0, 0x01, 0x18, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6,
  0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x10, 0x86, 0x00, 0x07, 0x60, 0x00, 0x00, 0x00, 0x3F, 0x06, 0xE0, 0x00, 0xC0, 0x01, 0x00, 0xC0, 0x03, 0x38, 0xE0, 0x00, 0x80, 0x07, 0x00, 0xC0, 0x00, 0x38,
  0xE0, 0x00, 0x00, 0x3E, 0x00, 0x60, 0x00, 0x38, 0xE0, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x38, 0xE0, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x07, 0x38, 0xE0, 0x00, 0xC0, 0x01, 0x00, 0x00, 0x07, 0x38,
  0xE6, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0x3F, 0x38, 0xE6, 0x00, 0xC0, 0x0F, 0x00, 0x00, 0x3F, 0x38, 0xE4, 0x00, 0xC0, 0x0F, 0xE0, 0x03, 0x3F, 0x38, 0xE6, 0x00, 0x00, 0x00, 0xF0, 0x07, 0x00, 0x38,
  0xE6, 0x00, 0x00, 0x00, 0xF0, 0x03, 0x00, 0x38, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE0, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x38,
  0xE0, 0xE0, 0x00, 0x00, 0xFC, 0x1F, 0x00, 0x38, 0x00, 0xC7, 0x07, 0x00, 0xC4, 0x0E, 0x00, 0x06, 0x30, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x46, 0x18, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x46,
  0x30, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x60, 0x38, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x61, 0x40, 0x38, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x21, 0x00, 0xE0, 0xFF, 0x01, 0x00, 0x00, 0x3F, 0x00,
  0x00, 0xE0, 0xFF, 0x01, 0x00, 0x00, 0x3F, 0x00, 0x08, 0x1F, 0x02, 0x00, 0x00, 0x00, 0x08, 0x08, 0x0E, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0xE2, 0x1C, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x31,
  0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x61, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x38, 0xC0, 0x21, 0x1C, 0x03, 0x00, 0x00, 0x00, 0xF0, 0xC0, 0x41, 0xFC, 0x03, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0x05,
  0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x23, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x06, 0x03, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x06, 0x03, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x06,
  0x03, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x38, 0x06, 0x03, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0x30, 0x06, 0x03, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x07, 0x06, 0x03, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x07, 0x06,
  0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x07, 0x06, 0x03, 0x00, 0x00, 0xC0, 0x03, 0x00, 0x07, 0x06, 0x03, 0x00, 0x00, 0x7E, 0x02, 0xE0, 0x00, 0x7E, 0x03, 0x00, 0x00, 0xFE, 0x1F, 0xE0, 0x00, 0x1E,
  0xFC, 0xFF, 0xFF, 0x01, 0x1C, 0x3C, 0xC0, 0x11, 0xFC, 0xFF, 0xFF, 0x01, 0x00, 0x3C, 0xC0, 0x19, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x07, 0xC0, 0x05, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x03, 0xC0, 0x01,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  /* (64 X 64 )*/

};
void setup(void) {
  Serial.begin(9600);
  u8g2.begin();

  pinMode(Trig, OUTPUT);
  pinMode(Echo, INPUT);
  servo_1.attach(9);  // Configure the myservo instance to pin 9


  pinMode(13, INPUT);   //sensor
  pinMode(12, OUTPUT);  //mada
  pinMode(11, OUTPUT);  //dc
}

void loop(void) {
  //Sends a short burst of low-high-low pulses to Trig to trigger ranging.
  digitalWrite(Trig, LOW); //Send a low level to Trig
  delayMicroseconds(2);    //Wait 2 Subtle
  digitalWrite(Trig, HIGH); //Send a high level to Trig
  delayMicroseconds(10);    //Wait 10 Subtle
  digitalWrite(Trig, LOW); //Send a low level to Trig
  temp = float(pulseIn(Echo, HIGH)); //Store echo wait time
  cm = (temp * 17 ) / 1000; //Converting echo time to cm
  Serial.print("Echo =");
  Serial.print(temp);//Serial output of wait time raw data
  Serial.print(" | | Distance = ");
  Serial.println(cm);//Serial port output distance converted to cm results
  cm = (int)cm;
  if (cm > 20) {
    pic = 1;
  } else if (cm < 10)
  {
    pic = 2;
  } else
  {}
  if (digitalRead(13) == LOW) {
    pic = 3;
    digitalWrite(12, HIGH);
    digitalWrite(11, HIGH);
  } else
  {
    digitalWrite(12, LOW);
    digitalWrite(11, LOW);
  }
  if (pic == 1) {
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_ncenB14_tr);
      u8g2.drawXBMP(32, 0, bmp1_x, bmp1_y, bmp1);
    } while ( u8g2.nextPage() );
    delay(500);

  } else if (pic == 2) {
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_ncenB14_tr);
      u8g2.drawXBMP(32, 0, bmp2_x, bmp2_y, bmp2);
    } while ( u8g2.nextPage() );
    delay(500);

    for (int i = 45; i < 145; i++) {
      servo_1.write(i);
      delay(10);
    }
    delay(50);

    // Controls all servos from 180 degrees to 1 degree of rotation.
    for (int i = 145; i > 45; i--) {
      servo_1.write(i);
      delay(10);
    }
    delay(50);


  } else if (pic == 3)
  {
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_ncenB14_tr);
      u8g2.drawXBMP(32, 0, bmp3_x, bmp3_y, bmp3);
    } while ( u8g2.nextPage() );
    delay(500);

   for (int i = 45; i < 145; i++) {
      servo_1.write(i);
      delay(10);
    }
    delay(50);

    // Controls all servos from 180 degrees to 1 degree of rotation.
    for (int i = 145; i > 45; i--) {
      servo_1.write(i);
      delay(10);
    }
    delay(50);
    Serial.println("3");
  } else
  {
  }











  /*    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_ncenB14_tr);
      u8g2.drawXBMP(32, 0, bmp4_x, bmp4_y, bmp4);
    } while ( u8g2.nextPage() );
    delay(500);*/


  /*
    // Controls all servos from 0 degrees to 179 degrees.
    for (int i = 0; i < 180; i++) {
      servo_1.write(i);
      delay(5);
    }
    delay(50);

    // Controls all servos from 180 degrees to 1 degree of rotation.
    for (int i = 180; i > 0; i--) {
      servo_1.write(i);
      delay(5);
    }
    delay(50);*/
}